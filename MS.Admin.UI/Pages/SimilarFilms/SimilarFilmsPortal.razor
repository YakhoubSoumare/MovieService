@inject IAdminService AdminService

@if (!string.IsNullOrEmpty(Alert))
{
<div class="alert alert-danger alert-dismissible fade show w-25" role="alert">
	<strong>couldn't create film.</strong>
	<button type="button" class="btn-close" data-bs-dismiss="alert" @onclick="CloseAlert" aria-label="Close"></button>
</div>
}

@if (Navigation.Equals(RTPageType.Create))
{
	<ChangeSimilarFilm RTPage="@Navigation" OnChange="OnChange"></ChangeSimilarFilm>
}
else if (Navigation.Equals(RTPageType.Delete))
{
	<ChangeSimilarFilm Model="@Similar" RTPage="@Navigation" OnChange="OnChange"></ChangeSimilarFilm>
}

<div class="d-flex me-1">
	<a class="btn btn-outline-secondary me-1" href="/" role="button">Home</a>
	<button type="button" class="btn btn-outline-primary me-1" @onclick="()=>ChangeRTPageType(RTPageType.Index)">Index</button>
	<button type="button" class="btn btn-outline-success" @onclick="()=>ChangeRTPageType(RTPageType.Create)">Create</button>
</div>

<SimilarFilmsIndex OnClick="OnClick" Model="Model"></SimilarFilmsIndex>

@code{
	public string Alert { get; set; } = string.Empty;
	public string Navigation { get; set; } = RTPageType.Index;
	[Parameter] public List<ViewSimilarFilmDTO> Model { get; set; } = new();
	public ViewSimilarFilmDTO Similar { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		Alert = string.Empty;
		Model = await AdminService.GetAsync<ViewSimilarFilmDTO>($"similarfilms");
	}

	void ChangeRTPageType(string rtPageType)
	{
		Navigation = rtPageType;
	}

	void CloseAlert()
	{
		Alert = string.Empty;
	}

	async Task OnClick(RTClickModel model)
	{
		if (model.RTPageType.Equals(RTPageType.Delete))
		{
			foreach(var similar in Model)
			{
				if(similar.FilmId==model.FilmId && similar.SimilarFilmId == model.SimilarId)
				{
					Similar = similar;
				}
			}
		}
		ChangeRTPageType(model.RTPageType);
	}

	async Task OnChange(string alert)
	{
		try
		{
			Alert = alert;
			Model = await AdminService.GetAsync<ViewSimilarFilmDTO>($"similarfilms");
			ChangeRTPageType(RTPageType.Index);
		}
		catch
		{
			Alert = $"Couldn't create/delete the similarity";
		}
	}
}


@*@inject IAdminService AdminService

@if (!string.IsNullOrEmpty(Alert))
{
	<div class="alert alert-danger alert-dismissible fade show w-25" role="alert">
		<strong>couldn't create film.</strong>
		<button type="button" class="btn-close" data-bs-dismiss="alert" @onclick="CloseAlert" aria-label="Close"></button>
	</div>
}

@if (Navigation.Equals(PageType.Create))
{
	<ChangeSimilarFilm Page="@Navigation" OnChange="OnChange"></ChangeSimilarFilm>
}


<div class="d-flex me-1">
	<a class="btn btn-outline-secondary me-1" href="/" role="button">Home</a>
	<button type="button" class="btn btn-outline-primary me-1" @onclick="()=>ChangePageType(PageType.Index)">Index</button>
	<button type="button" class="btn btn-outline-success" @onclick="()=>ChangePageType(PageType.Create)">Create</button>
</div>

@code {
	[Parameter] public List<BaseSimilarFilmDTO> Model { get; set; } = new();

	public string Alert = string.Empty;

	[Parameter] public string Navigation { get; set; } = PageType.Index;

	public BaseSimilarFilmDTO SimilarFilm = new();

	protected async override Task OnInitializedAsync()
	{
		Model = await AdminService.GetAsync<BaseSimilarFilmDTO>($"similarfilms");
		//Model = await AdminService.GetAsync<SimilarFilmDTO>($"films/{Model.FilmId}/similar/{Model.SimilarFilmId}");
		Alert = string.Empty;
	}


	void CloseAlert()
	{
		Alert = string.Empty;
	}

	async Task OnChange(string alert)
	{
		try
		{
			Alert = alert;
			Model = await AdminService.GetAsync<BaseSimilarFilmDTO>($"similarfilms");
			ChangePageType(PageType.Index);
		}
		catch
		{
			Alert = $"Couldn't create/edit/delete the similarity";
		}		
	}

	void ChangePageType(string pageType)
	{
		Navigation = pageType;
	}
}
*@