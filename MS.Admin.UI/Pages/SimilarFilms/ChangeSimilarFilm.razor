@inject IAdminService AdminService

<div class="d-flex w-25 m-xl-auto">
	<EditForm Model="Model" OnValidSubmit="OnFormSubmit">
		<h4>@RTPage SimilarFilm</h4>
		<div class="mb-3">
			@if (RTPage.Equals(RTPageType.Delete))
			{
				<div class="mb-2">
					<input type="text" id="title" class="form-control" disabled placeholder="@Model.FilmTitle" @bind-value="Model">
				</div>

			}

			<div class="d-flex justify-content-center">
				<input class="btn btn-@(RTPage.Equals(RTPageType.Delete) ? "danger" : "primary")" type="submit" value="@RTPage">
			</div>
		</div>


	</EditForm>
</div>

@code {
	[Parameter] public ViewSimilarFilmDTO Model { get; set; } = new();
	[Parameter] public string RTPage { get; set; } = string.Empty;
	[Parameter] public EventCallback<string> OnChange { get; set; }
	List<FilmDTO> Films = new();
	ViewFilmGenresDTO filmgenre = new();

	public int[] SelectedIds { get; set; } = new int[] { };
	EditContext EditContext { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Films = await AdminService.GetAsync<FilmDTO>($"films");
		EditContext = new(SelectedIds);
	}

	async Task OnFormSubmit()
	{
		try
		{
			if (RTPage.Equals(RTPageType.Create))
			{
				BaseSimilarFilmDTO similarFilmsModel = new();
				similarFilmsModel.FilmId = Model.FilmId;
				similarFilmsModel.SimilarFilmId = Model.SimilarFilmId;
				await AdminService.CreateAsync<BaseSimilarFilmDTO>($"filmgenres", similarFilmsModel);
			}
			else if (RTPage.Equals(RTPageType.Delete))
			{
				await AdminService.DeleteRefTable($"films/{Model.FilmId}/genres/{Model.SimilarFilmId}");
			}
			await OnChange.InvokeAsync("");
		}
		catch
		{
			await OnChange.InvokeAsync("could not create/delete similarity");
		}
	}
}

@*@inject IAdminService AdminService

<div class="d-flex w-25 m-xl-auto">
	<EditForm EditContext="Model" OnValidSubmit="OnFormSubmit">
		<DataAnnotationsValidator />
		<h4>@Page Film</h4>
		<div class="mb-3">
			@if (Page.Equals(PageType.Delete))
			{
				<div class="mb-2">
					<input type="text" id="title" class="form-control" disabled placeholder="" @bind-value="Model.Title">
				</div>

			}
			else if (Page.Equals(PageType.Create))
			{
				<div class="mb-2">
					<input type="text" id="title" class="form-control" placeholder="Title" @bind-value="Model.Title">
					<ValidationMessage For="@(() => Model.Title)" />
				</div>

				<InputSelect @bind-Value="Model.FilmId" class="form-control mb-3">
					<option value=0>Film ...</option>
					@foreach (var film in SimilarFilms)
					{
					<option value="@film.Id">@film.Name</option>
					}
				</InputSelect>

				<InputSelect @bind-Value="Model.SimilarFilmId" class="form-control mb-3">
					<option value=0>Similar ...</option>
					@foreach (var similar in Directors)
					{
						<option value="@similar.Id">@similar.Name</option>
					}
				</InputSelect>

			}
			<div class="d-flex justify-content-center">
				<input class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary")" type="submit" value="@Page">
			</div>

		</div>

	</EditForm>
</div>

@code {
	[Parameter] public BaseSimilarFilmDTO Model { get; set; } = new();
	[Parameter] public string Page { get; set; } = string.Empty;
	[Parameter] public EventCallback<string> OnChange { get; set; }

	List<ViewSimilarFilmDTO> SimilarFilms = new();

	protected override async Task OnInitializedAsync()
	{
		//SimilarFilms = await AdminService.GetAsync<BaseSimilarFilmDTO>($"directors");
		int a = 0;
	}

	async Task OnFormSubmit()
	{
		try
		{
			if (Page.Equals(PageType.Create))
			{
				await AdminService.CreateAsync<ViewSimilarFilmDTO>($"similarfilms", Model);


			}
			else if (Page.Equals(PageType.Delete))
			{
				await AdminService.DeleteRefTable($"films/{Model.FilmId}/similar/{Model.SimilarFilmId}");
			}

			await OnChange.InvokeAsync("");
		}
		catch
		{
			await OnChange.InvokeAsync("could not create/edit/delete film");
		}
	}
}
*@